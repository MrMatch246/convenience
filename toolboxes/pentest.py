import os
import sys
import json
import argparse
import hashlib
import shutil
import socket
import requests
from datetime import datetime
from pathlib import Path
from rich.prompt import Confirm, Prompt
from pentesting.utils import is_in_tmux
from pentesting.utils.logging import ConvenientLogging

# ------------------------
# Helper Functions
# ------------------------
def get_internal_ip():
    return socket.gethostbyname(socket.gethostname())


def get_external_ip():
    return requests.get("https://api.ipify.org").text.strip()


def md5_hash(file_path):
    hasher = hashlib.md5()
    with open(file_path, "rb") as f:
        for chunk in iter(lambda: f.read(4096), b""):
            hasher.update(chunk)
    return hasher.hexdigest()


def parse_args():
    parser = argparse.ArgumentParser(description="Pentest Automation Script")
    parser.add_argument("--bypass-tmux", action="store_true", help="Bypass tmux check")
    parser.add_argument("--project", type=str, help="Path to project folder")
    parser.add_argument("--here", action="store_true", help="Use current directory as project folder")
    parser.add_argument("--target", type=str, help="Path/IP/domain for target(s)")
    parser.add_argument("--force-phase", action="store_true", help="Force rerun of phases")
    parser.add_argument("--skip-ip-check", action="store_true", help="Skip IP verification")
    return parser.parse_args()




def handle_target(target_arg, targets_file, project_path, log):
    """Handle target file or input logic."""
    if Path(target_arg).exists():
        new_targets = Path(target_arg).read_text().splitlines()
    else:
        new_targets = [target_arg]

    if targets_file.exists():
        existing_targets = targets_file.read_text().splitlines()
        if set(new_targets) != set(existing_targets):
            action = Prompt.ask(
                "Targets differ. Choose action",
                choices=["Overwrite", "Merge", "Skip", "Abort"],
                default="Abort"
            )
            if action == "Overwrite":
                targets_file.write_text("\n".join(new_targets))
                (project_path / ".new_targets").touch()
                log.info("Targets overwritten.")
            elif action == "Merge":
                merged = sorted(set(existing_targets + new_targets))
                targets_file.write_text("\n".join(merged))
                (project_path / ".new_targets").touch()
                log.info("Targets merged.")
            elif action == "Skip":
                log.info("Target update skipped.")
                return
            else:
                log.error("Aborting due to target mismatch.")
                sys.exit(1)
    else:
        targets_file.write_text("\n".join(new_targets))
        log.info("New targets file created.")


def main():
    args = parse_args()
    if args.project:
        project_path = Path(args.project).resolve()
    elif args.here:
        project_path = Path.cwd()
    else:
        project_path = Path.cwd() / f"pentest_{datetime.now().strftime('%Y-%m-%d')}"
    project_path.mkdir(parents=True, exist_ok=True)
    (project_path / "logs").mkdir(exist_ok=True)
    project_json = project_path / f".{project_path.name}.json"
    # Initialize logging
    ConvLog = ConvenientLogging(project_path)
    log = ConvLog.getLogger(name="pentest_phase0_setup")

    if not args.bypass_tmux and not is_in_tmux():
        log.error("[bold red]This script should be run inside tmux. Use --bypass-tmux to skip this check.")
        sys.exit(1)

    # Phase indicator helper
    def phase_done(phase):
        (project_path / f".phase_{phase}").touch()
        log.info(f"Phase {phase} marked as complete.")

    # ------------------------
    # First Start Initialization
    # ------------------------
    if not project_json.exists():
        log.info(f"Initializing new pentest project at {project_path}")
        (project_path / "scope").mkdir(exist_ok=True)
        (project_path / "recon").mkdir(exist_ok=True)


        project_data = {}
        internal_ip = get_internal_ip()
        external_ip = get_external_ip()

        log.info(f"[yellow]Detected Internal IP:[/] {internal_ip}")
        log.info(f"[yellow]Detected External IP:[/] {external_ip}")
        if not Confirm.ask("Are these IP addresses correct?"):
            log.error("IP addresses not confirmed.")
            sys.exit(-1)

        project_data["internal_ip"] = internal_ip
        project_data["external_ip"] = external_ip

        # Handle targets
        scope_dir = project_path / "scope"
        targets_file = scope_dir / "targets.txt"

        if args.target:
            handle_target(args.target, targets_file, project_path, log)
        else:
            existing_target = Path.cwd() / "targets.txt"
            if existing_target.exists():
                if Confirm.ask(f"Use {existing_target} as targets.txt?"):
                    shutil.copy(existing_target, targets_file)
                    log.info("Existing targets.txt copied to scope folder.")
                else:
                    log.error("No target specified, exiting.")
                    sys.exit(-1)
            else:
                log.error("No target specified and no targets.txt found.")
                sys.exit(-1)

        # Save MD5 of targets
        project_data["targets_md5"] = md5_hash(targets_file)
        with open(project_json, "w") as f:
            json.dump(project_data, f, indent=4)

        phase_done(0)

    # ------------------------
    # Every Start Logic
    # ------------------------
    else:
        log.info("Existing project detected. Loading configuration.")
        with open(project_json, "r") as f:
            project_data = json.load(f)

        if not args.skip_ip_check:
            current_internal = get_internal_ip()
            current_external = get_external_ip()
            if current_internal != project_data["internal_ip"] or current_external != project_data["external_ip"]:
                log.info(f"[red]IP address mismatch detected.[/]")
                if Confirm.ask("Update IP addresses?"):
                    project_data["internal_ip"] = current_internal
                    project_data["external_ip"] = current_external
                    log.info("IP addresses updated.")
                else:
                    log.error("IP mismatch not confirmed. Exiting.")
                    sys.exit(-1)

        # Verify target hash
        targets_file = project_path / "scope" / "targets.txt"
        current_hash = md5_hash(targets_file)
        if current_hash != project_data["targets_md5"]:
            log.info("[red]Targets have changed![/]")
            if Confirm.ask("Confirm new targets?"):
                project_data["targets_md5"] = current_hash
                (project_path / ".new_targets").touch()
                log.info("New targets confirmed and flagged for re-run.")
            else:
                log.error("Target change not confirmed. Exiting.")
                sys.exit(-1)

        with open(project_json, "w") as f:
            json.dump(project_data, f, indent=4)


if __name__ == "__main__":
    main()
